ext.libpath = file('./').absolutePath

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.peterabeles'
version = '2.0.1'

java {
    sourceCompatibility = JavaVersion.VERSION_14
    targetCompatibility = JavaVersion.VERSION_14
}

// Creates Java 8 byte code
compileJava {
    options.compilerArgs += [ "--release", "8"]
//        options.compilerArgs += '--enable-preview'
}

repositories {
    mavenCentral()
    mavenLocal()

    maven {
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

test {
    ignoreFailures true
    reports.html.enabled = false
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

javadoc {
    configure(options) {
        failOnError = false
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }

    test {
        java {
            srcDir 'test'
            srcDir 'examples'
        }
    }
}

// if Maven central isn't setup in gradle.properties skip all of this
if( project.hasProperty('ossrhUsername') ) {
    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'Auto64Fto32F'
                    packaging 'pom'
                    // optionally artifactId can be defined here
                    description 'A minimalist library for converting double (64-bit) numerical Java code into float (32-bit)'
                    url 'http://boofcv.org'

                    scm {
                        connection 'scm:git:git://github.com/lessthanoptimal/Auto64Fto32F.git'
                        developerConnection 'scm:git:git://github.com/lessthanoptimal/Auto64Fto32F.git'
                        url 'https://github.com/lessthanoptimal/Auto64Fto32F'
                    }

                    licenses {
                        license {
                            name 'Public Domain'
                            url 'http://unlicense.org/'
                        }
                        license {
                            name 'MIT'
                            url 'https://opensource.org/licenses/MIT'
                        }
                    }

                    developers {
                        developer {
                            id 'pabeles'
                            name 'Peter Abeles'
                            email 'peter.abeles@gmail.com'
                        }
                    }
                }
            }
        }
    }
}


task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn subprojects*.test
}

wrapper {
    distributionType = Wrapper.DistributionType.BIN
    gradleVersion = '6.3'
}

