/*
 * Auto64to32F is released to Public Domain or MIT License. Either maybe used.
 */

ext.libpath = file('./').absolutePath

project.ext.lombok_version = '1.18.36'
project.ext.jabel_version = '1.0.1-1'
project.ext.guava_version = '33.2.1-jre'
project.ext.args4j_version = '2.33'
project.ext.junit_version = '5.11.4'
project.ext.commons_io_version = '2.16.1'
project.ext.snakeyaml_version = '2.3'
project.ext.jmh_version = '1.36'

allprojects {
    group = 'com.peterabeles'
    version = '3.2.3-SNAPSHOT'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    java {
        withJavadocJar()
        withSourcesJar()
        toolchain { languageVersion = JavaLanguageVersion.of(17) }
    }

    // Prevents tons of errors if someone is using ASCII
    tasks.withType(JavaCompile).configureEach { options.encoding = "UTF-8" }
    // Creates Java 11 byte code but Java 17 syntax
    tasks.withType(JavaCompile).configureEach {
        sourceCompatibility = 17
        options.release = 11
    }

    // Enable incremental compile. Should make single file changes faster
    tasks.withType(JavaCompile) { options.incremental = true }

    repositories {
        mavenCentral()
        mavenLocal()

        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url = 'https://jitpack.io' } // Allows annotations past Java 8 to be used
    }

    test {
        useJUnitPlatform()
        reports.html.setRequired(false)
    }

    sourceSets {
        examples { java { srcDir 'examples' } }
    }

    dependencies {
        examplesImplementation files(project.sourceSets.main.compileClasspath)
        examplesImplementation files(project.sourceSets.main.runtimeClasspath)

        compileOnly "org.projectlombok:lombok:${lombok_version}"
        compileOnly 'org.jetbrains:annotations:20.0.0' // @Nullable

        testImplementation("org.junit.jupiter:junit-jupiter-api:${junit_version}")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junit_version}")

        annotationProcessor("com.pkware.jabel:jabel-javac-plugin:${jabel_version}")
        annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    }

    javadoc { configure(options) { failOnError = false } }

    if (!project.tasks.publish.enabled)
        return

    // if Maven central isn't setup in ~/.gradle/gradle.properties fill in these variables to make it happy
    if (!project.hasProperty('ossrhUsername')) {
        ext.ossrhUsername = "dummy"
        ext.ossrhPassword = "dummy"
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom {
                    name = 'Auto64Fto32F'
                    description = 'A minimalist library for converting double (64-bit) numerical Java code into float (32-bit)'
                    url = 'https://github.com/lessthanoptimal/Auto64Fto32F'
                    licenses {
                        license {
                            name = 'MIT'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                        license {
                            name = 'Public Domain'
                            url = 'http://unlicense.org/'
                        }
                    }
                    developers {
                        developer {
                            id = 'pabeles'
                            name = 'Peter Abeles'
                            email = 'peter.abeles@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/lessthanoptimal/Auto64Fto32F.git'
                        developerConnection = 'scm:git:git://github.com/lessthanoptimal/Auto64Fto32F.git'
                        url = 'https://github.com/lessthanoptimal/Auto64Fto32F'
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }

    if (ossrhPassword != "dummy") {
        signing { sign publishing.publications.mavenJava }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.BIN
    gradleVersion = '8.12.1'
}

